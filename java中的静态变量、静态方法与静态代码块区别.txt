我们知道类的生命周期分为装载、连接、初始化、使用和卸载的五个过程。
其中静态代码在类的初始化阶段被初始化。而非静态代码则在类的使用阶段（也就是实例化一个类的时候）才会被初始化。


可以将静态变量理解为类变量（与对象无关），而实例变量则属于一个特定的对象。

静态变量有两种情况：

静态变量是基本数据类型，这种情况下在类的外部不必创建该类的实例就可以直接使用
静态变量是一个引用。这种情况比较特殊，主要问题是由于静态变量是一个对象的引用，
那么必须初始化这个对象之后才能将引用指向它。
因此如果要把一个引用定义成static的，就必须在定义的时候就对其对象进行初始化。











静态代码块主要用于类的初始化。它只执行一次，并在main函数之前执行。

静态代码块的特点主要有：

静态代码块会在类被加载时自动执行。
静态代码块只能定义在类里面，不能定义在方法里面。
静态代码块里的变量都是局部变量，只在块内有效。
一个类中可以定义多个静态代码块，按顺序执行。
静态代码块只能访问类的静态成员，而不允许访问实例成员。



（静态）变量和（静态）代码块的也是有执行顺序的，与代码书写的顺序一致。
在（静态）代码块中可以使用（静态）变量，但是被使用的（静态）变量必须在（静态）代码块前面声明。
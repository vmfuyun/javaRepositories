 栈封闭
	多个线程访问同一个方法的局部变量时，不会出现线程安全问题，
	因为局部变量存储在虚拟机栈中，属于线程私有的           使用局部变量--servlet接口里不能有类变量

线程本地存储（Thread Local Storage）
	最重要的一个应用实例就是经典 Web 交互模型中的“一个请求对应一个服务器线程”（Thread-per-Request）的处理方式，
	这种处理方式的广泛应用使得很多 Web 服务端应用都可以使用线程本地存储来解决线程安全问题。
	可以使用 java.lang.ThreadLocal 类来实现线程本地存储功能。	
	每个 Thread 都有一个 ThreadLocal.ThreadLocalMap 对象。ThreadLocal 从理论上讲并不是用来解决多线程并发问题的，因为根本不存在多线程竞争。
	在一些场景 (尤其是使用线程池) 下，
	由于 ThreadLocal.ThreadLocalMap 的底层数据结构导致 ThreadLocal 有内存泄漏的情况，
	应该尽可能在每次使用 ThreadLocal 后手动调用 remove()，以避免出现 ThreadLocal 经典的内存泄漏甚至是造成自身业务混乱的风险。

可重入代码(Reentrant Code)
	也叫纯代码,是一种允许多个线程同时访问的代码,一般使用的是final修饰的代码,一般都是传的局部变量,并每次都可以重复进入这个代码 并不会报错
	程序在运行过程中可以被打断，并由开始处再次执行，并且在合理的范围内（多次重入，而不造成堆栈溢出等其他问题），程序可以在被打断处继续执行，且执行结果不受影响。
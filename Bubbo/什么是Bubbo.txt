系统架构:
	软件的组成,部署 等等 一系列  
系统服务器集群:
	负载均衡服务器来分解应用服务器
	数据库服务器集群使用 主从同步,读写分离
分布式就是 物理上的 分离
	分集群 每个服务器的应用都是一样的
	微服务 每一个服务也就是每个service 都是独立的
微服务的优势
	降低耦合
	互不干扰,  每个服务可以更好的选择自己的应用场景
	充分使用硬件的资源,
	降低维护的成本和难度
	提高应用系统的稳定性
RPC协议
	

 Dubbo是 [1]  阿里巴巴公司开源的一个高性能优秀的微服务应用框架，
	使得应用可通过高性能的 RPC 实现服务的输出和输入功能，
	可以和   Spring框架无缝集成。  
	解决的问题:大数据的
特点:
	面向接口的远程方法调用，
	智能容错和负载均衡，
	以及服务自动注册和发现
架构图 
	注意1,注册中心 , 监控中心 是可以没有 ,,但是消费者和生产者 要设置对应的 服务地址和端口

最优实践
	建议将服务接口、服务模型、服务异常等均放在 API 包中，
	因为服务模型和异常也是 API 的一部分，
	这样做也符合分包原则：重用发布等价原则(REP)，共同重用原则(CRP)。
	
	然后让消费者和生产者 依赖 上述公共的部分
zookeeper
	在conf的zoocfg 有data的位置,和端口号设置

实验 验证步骤
	创建公共的 member-api项目
	在生产者 或者叫service 的项目
	消费者 也就是  website 项目
boot	
	@EnableDubbo开启dubbo扫描
	生产者 要注册到注册中心   , 应用的名字, 服务的协议protocol 和 端口,  需要贴dubbo的@service注解
	消费者 需要配置@reference 来获取生产者的服务,  配置  注册中心   应用的名字, 
	dubbo 会有自动为生产者消费者 自己建立连接
	dubbo 会自动 为 生产者和消费者 加上本机 的ip

启动时的检查
	服务之间的交叉引用, 消费者项目 可以设置 启动的时候不检查 服务是不是启动了
	dubbo.consumer.check=false 一般设置在消费者项目
配置优先级
	相同配置:消费者优先
服务集群
	解决单一服务 压力大
	负载均衡算法
		1,random 随机                            可以通过权重来 设置访问 比例
		2,roundRrobin 轮询
		3,consistenthash   hash一致     解决session 一致问题
		4,leastactive 最少活跃 
	dubbo.consumer.loadbalance=
多版本发布(灰度发布)
	版本升级,生产者进行 配置 版本 在service 加上version..
	在消费者的@reference(version)来设置   消费者(客户端)使用哪个版本,,, *是随机
服务超时,重试,容错:
	消费者会自动去访问两次 , 在消费端配置 响应超时时间, 和 重试 次数  
	dubbo.consumer.timeout		dubbo.consumer.retries	
重试 : 	幂等操作的时候  设置重试次数,     幂等操作是 操作 不会 生成新的数据   比如 删除,查询,修改
	非幂等操作  不设置重试次数	例如:保存
	
	容错:调用服务,报错,为了整个流程 正常走,dubbo会提供一个正常点的 容错机制
	对于服务集群 提供了 策略  对应的操作  指南
服务的降级
	一个服务器中的话 把无关重要的服务进行 屏蔽,
	方式1 直接 屏蔽	 直接返回 null
	方式2 容错                 访问超时 超次数后 返回null

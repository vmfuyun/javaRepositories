1 , 界面  注意name属性
2,接受到 账号密码  进行调用 service中的登陆逻辑方法 ,, 
	service层
		不为null-成功: 共享当前用户--->共享权限--	
		为null--失败:抛出 错误 异常包含信息 ---告诉conterllor
				可以自定义异常 继承 runtimeExecption  写构造器 
							必须覆盖其 父类的 构造器---  主要有两个方法 msg和类型
	完成service层
3,权限信息       
	为了解耦  --不能直接 调用session  需要间接  通过 工具   得到session也不能定义变量接受 (不能导入包)
	查询本登陆人员信息的 权限表达式  存到session 中  注意 存session的格式     XXX_IN_SESSION
			查询出表达式(三个表查询)一般是有重复的数据  如何去重?!
					用sql语句方法 distinct  去重
					用set集合 来去重
4,注销操作 
	销毁session对象 用invalidate方法
5,拦截器  两个 --实现 或者 继承的方式   intercept 变成拦截器     (注意拦截放行是要  放行mvc 的 路径>>> 关键<<<)
	1,检查登陆信息   session.attr 是不是null --->是null 就 让重定向去 登陆界面
	2,权限检查拦截器  安全检查  看最后的流程图    
			一般的是一个顺向流程  关键
			拦截拦截到的 信息 存放在一个 obj里了 也就是handler里面




6,优化
	一般业务层 是 不能用mvc 的对象 
	一般会把有字符串的变成常量---能被编译检查 
	优化的 模式
		 一般是把业务层 需要共享到session(格式)(mvc层的数据)---变成一个 get 方法 或者set方法    
			以后只要是把业务层的数据 共享到 mvc层必须 构建成方法 形式如get set
		形式是把 session的共享数据的名称 (XXX_IN_SESSION) 定义成常量:
			其余的变成 对应的get set方法---  更容易操作
		             
---------------------------------------------------
this: -------->当前的对象 ,哪个对象执行,this就是谁
		1:this区分成员变量和局部变量的重命名问题
					this.name = name;
super:-------->当前的对象的父类对象
		1super(..) ---> 执行父类构造 (自动生成)
		
		1:this.方法()----> 子类的
		2:super.方法()---> 父类的
		
		子类的构造器最好跟分类一致

-----------------------------------------------------
1:static:(重点)
		特点:
			static修饰的内容,属于类,被所有的对象共享(共同使用,互相受影响)
				class Student{
					String name;// 对象独有,每个学生有自己名字
					static String teacher// 我们班的老师只有一个,所有学生的老师是一个.共同使用
				}
				
		怎么使用静态内容:
			一定要  类名.静态内容   ----->最安全
					System.out.print();
					Arrays.sort();
		注意:
			1:静态方法只能使用静态内容.
				public static void main(String[] args){// 主方法是 静态, 直接调用必须是静态
					show();//报错
					show2();//可以的
				}
				
				public void show(){};
				public static void show2(){};

			2:静态方法中不能使用 this  和 super
-------------------------------------------------------------------------
final:最终,不可修改的
	修饰类:----->该类没有子类
	修饰方法---->该方法不能被覆盖
	修饰变量---->
					基本类型 ---> 值不能改变
					引用类型----> 地址值不改 , 里面的内容可以改
						final int[] arr = {1,2,3}
						//arr = new int[5];// 报错
						arr[0] = 10 ; // 可以

--------------------------------------------------------------------------
class {
	static{  .... } // 静态代码块 ------>该类被使用是,只加载一次
	{...}           // 初始代码块(构造代码块)--> 创建该类对象, 执行一次
	
	修饰符 返回值 方法名(){//局部代码块   
		{}//局部代码块   			被使用时 才执行
	}
}


--------------------------------------------------------------------------------
匿名内部类:
	  需要使用接口中的方法
		 interface USB{
			public void show();
		 }
	  1:完整的写法:
			class A implements USB{ //新建一个类,是 接口的实现类
				public void show() {System.out.println("输出");}
			}
			
			A a = new A();//实现类对象调用方法
			a.show();
	  2:简化写法---->匿名内部类 --------->这种方式 只适合一次调用
			USB u = new USB(){// 直接new 接口 ,将接口中的方法补全
				public void show() {
						System.out.println("输出");
				}
			};
			u.show();
		

--------------------------------------------------------------------------------

------------------------------面试题--------------------------------------------
class A{
	static{
		System.out.println("A");
	}
}

class Ｂ　extends A{
	static{
		System.out.println("B");
	}
}

	B b = new B();
	// A  B
	子类构建之前 先完成父类的构建.
	
-------------------------------------------------------
接口和抽象类的区别:
	接口                   	   抽象类
关系 	实现         	               	 继承
构造器      没有   			 有
成员变量    全部是常量		 没有限定
成员方法	全部抽象方法	 没有限定
			多继承			 单继承









						
abstract  抽象的英文    
定义  abstract 访问修饰符  返回修饰符 方法名字();



使用abstract修饰且没有方法体的方法叫做抽象方法.
特点:
  1.使用抽象abstract修饰,方法没有方法体,留给子类去实现.
   2.抽象方法修饰符不可以是private,final和static.
         --private,子类无法访问该方法,也就无法实现
         --final,阻止了该方法的实现
         --static,一旦用static修饰,就不能被子类重写实现
   3.抽象方法必须定义在抽象类或接口中.
一般地,:习惯吧abstract卸载方法修饰符的最前面,一看就知道是抽象方法.
-----------------------------------
使用abstract修饰的类就是抽象类
特点:
1.不能创建实例,即不能用new一个抽象类.即使创建出抽象类对象,调用抽象方法根本没意义.
2.可以不包含抽象方法,若一旦包含,该类必须是抽象方,抽象类可以包含普通方法(留给子类调用的),抽象类是有构造器的(留给子类调用)
3.若子类没有实现/覆盖父类所有的抽象方法,那么子类也必须作为抽象类.
4.构造方法不能都定义成私有的,否则不能有子类(创建子类对象前先调用父类构造方法)
5.抽象类不能使用final修饰,因为必须有子类,抽象方法才能得以实现.
6.是不完整的类,需作为基类功能才能的以实现.

抽象类:一般我们起名,习惯使用abstract作为前缀,让调用者一看就知道是抽象类.
抽象类中可以不存在抽象方法,如此这样没有太大的意义,但是可以防止外界创建对象,-->我们后发现有些工具类没有抽象方法,但是也使用abstract修饰.
---------------------------------
抽象类不能实例化:
----------------------------------
抽象类和普通类的区别:
    普通类有的成员(方法,字段,构造器)抽象类都有.
    抽象类不能创建对象,抽象类中可以包含抽象方法.

总之,1.抽象类必须有子类,有实现(子类或子子类等来实现)才有意义
         2.对象必须完整-->抽象类所对应的不完整的对象是没有意义的.-->抽象类不能直接实例化,由非子类创建完整的对象
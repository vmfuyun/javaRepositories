而今天我们讨论的主要是系统服务端性能，一般用?QPS（Query?Per?Second，每秒请求数）来衡量，还有一个影响和?QPS?也息息相关，那就是响应时间
（Response?Time，RT），它可以理解为服务器处理响应的耗时。正常情况下响应时间（RT）越短，一秒钟处理的请求数（QPS）自然也就会越多，
这在单线程处理的情况下看起来是线性的关系，即我们只要把每个请求的响应时间降到最低，那么性能就会最高。
但是你可能想到响应时间总有一个极限，不可能无限下降，所以又出现了另外一
个维度，即通过多线程，来处理请求。
这样理论上就变成了“总?QPS?=（1000ms?/?响应时间）×?线程数量”，这样性能就和两个因素相关了，
一个是一次响应的服务端耗时，一个是处理请求的线程数。
接下来，我们一起看看这个两个因素到底会造成什么样的影响。


最好的设置:
线程数?=?2?*?CPU?核数?+?1,除去这个配置，还有一个根据最佳实
践得出来的公式：
线程数?=?[(线程等待时间?+?线程?CPU?时间)?/?线程?CPU?时间]?×?CPU?数量
当然，最好的办法是通过性能测试来发现最佳的线程数。


如何优化系统
对?Java?系统来说，可以优化的地方很多，这里我重点说一下比较有效的几种手
段，供你参考，它们是：减少编码、减少序列化、Java?极致优化、并发读优
化。接下来，我们分别来看一下。

那么如何才能减少编码呢？例如，网页输出是可以直接进行流输出的，即用?
resp.getOutputStream()?函数写数据，把一些静态的数据提前转化成字节，等
到真正往外写的时候再直接用?OutputStream()?函数写，就可以减少静态数据
的编码转换。

减少rpc---->同tomcat部署
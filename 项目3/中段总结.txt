1, 系统架构的演变
	第一个 阶段     是多个项目部署在一个 服务器上 
	第二个 阶段      一个服务器部署一个项目  
	第三个 阶段      为了解决 数据量过大的情况   使用的是 多个服务器部署同一个项目来 运行  也就是 集群模式
	第四个 阶段       多个服务器 部署 一个项目的 不同业务模块  分布式  或者 分布式 + 集群

2, 分布式的认识
	原先的项目 是 以单体的架构   存在,,,  
		 单体架构: 在软件设计中，经常提及和使用经典的3层模型，即表示层、业务逻辑层和数据访问层。
	
		多体结构:分布式  或者  微服务  :   会把组件按着 需求来 分离   达到 资源的合理利用 
	api 在web 其实是方法的映射


dubbo 中间件 最佳实践
	服务化最佳实践
	
	分包
	建议将服务接口、服务模型、服务异常等均放在 API 包中，    
	因为服务模型和异常也是 API 的一部分，这样做也符合分包原则：
			重用发布等价原则(REP)，共同重用原则(CRP)。
	
	1 放在一个公共的  2 真正的实现分离出来  更好的 实现 开闭原则

redis 设计规则      存储的准则  使用前缀方式 来作为区分
	使用开闭原则   建立一个 参数的基类   来存放不能改变的(公共的) 参数 (字段 属性),,  提供 一个全参构造器 让子类继承  
			各自的东西业务类型  再去继承基类   覆写 构造器       在 dubbo,,, 参数类 必须要 实现 序列化接口 

	单一职责原则   一个类 只负责一种 职责...     在 service 层 有一个 基本类 是负责操作  其余的是业务 操作
		
	方法的 通用设计  :   如果在一个同一组件里   参数尽量 使用 基类 或者 接口 更好的 使用多态的特性 更好的操作   
			为了 通用型操作的  可以 使用 泛型 ()-- 因为 redis 只能存储 string list set map zset 
					 操作之前 一定要先确定 使用什么类型!!!!!重点

分布式的 session问题 和 缓存问题
		 一般是 按着前缀来存储
	类似的 获取验证码    1 生成验证码  发短信     2  放在redis  并设置时间    3 ,再获取出来   和输入的比较 看 是否一致
	登陆问题  		1登陆 先去查询  成功   2 存redis 并设置时间 一般是存对象  ,,,  并把无前缀的key 传到 前端 创建cooktie (设置时间.名称,path(跨域))
	(登陆类似于 把原先的共享信息 要自己进行 操作一遍)				3,把登陆信息 从 redis 取出来 并延长时间  然后存到session  供前端页面 获取数据    



主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。

读写分离能提高性能的原因在于：
	主从服务器负责各自的读和写，极大程度缓解了锁的争用；	
	从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；
	增加冗余，提高可用性。
读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。

myCat的--应用场景:读写分离,分库分表,多租户                 多租户使用的是 mycat的注解
水平拆分:
	单库单表 有1000w数据, 操作就很慢了	
	就需要进行 把所有的数据 进行水平分割成 几张表  中间是一个 MyCat  有一个切分规则(1,求模取余)

垂直拆分:
	按着业务要求进行拆分  , 不同的服务 连不同的数据库  中间加上myCat

基本概念:
	mycat 有一个逻辑库和逻辑表   也就是你操作的是逻辑库-逻辑表
	那怎么操作Mycat让他知道操作那个表?
	1,定义逻辑表和真实表的映射关系
	2,切分规则/分片规则     --->按着什么规则到哪个数据库 哪个表

conf配置文件 需要注意的:
	rule.xml      规则  分配规则
	schema.xml  模式  逻辑表 逻辑库
	server.xml   环境变量 账号密码一类

	schema.xml 删除所有信息,    :1,$d    1到最后删除   
		注意 如果有超时 可以去百度 添加一个参数

	rule.xml  分片规则 : 分时间,  分大小,求模取余      里面有一个count 参数  要和DN数量保持一致    
	
	获取的时候 是全部获取

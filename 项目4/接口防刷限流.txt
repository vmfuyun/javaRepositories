1,秒杀的商品  买到就是赚到, 有可能有人  通过浏览器 获取地址来 刷/隐藏秒杀地址   	
	---通过动态的地址来实现,  主要是两个服务 点击秒杀 先去一个服务器getpath   然后再去前端进行拼接,然后再访问真正的秒杀服务器
2,验证码,限定流量  
3,针对ip进行,限定,1个小时访问几次,      肉机是无法限定     DDOS

隐藏秒杀地址:
	使用的是一个服务器生产一个uuid到前端也 存到redis中2秒很短的信息,然后请求的时候, 前端把这个uuid 拼接到 路径上 
	然后到真正的真实的秒杀服务上登陆,  然后获取对应的uuid数   然后验证 不成功 pass                    地址 http://localhost/uuid/seckill/
图形验证码:
	1,业务限流      --也要和秒杀的业务分离到另外一个服务器    验证和生成验证码都不在秒杀的服务  一般验证在getpath    
	注意验证码是 src get请求是有缓存的  要加上时间戳  getdata().gettime()
	
	注意获取对应的验证码信息, 判断---
防刷限流:
	Nginx有专门的限流模块;    有语言限制  (服务端的)
	Zuul  使用redis  使用的是,redis 原子性减1,并设置时间   然后通过判断返回的值来看 来判断 

	()
	zuul的限流已经 有start   --->ratelimit  通过一些算法 桶,令牌,
	限流后,超过流量后, 会把不正常的网页 429  ,不符合前后端分离的情况
	修改zuul 的怎么显示页面的  没有返回一个 json数据
	RateLimiPreFilter   会达到限制后会 往 ctx中添加   ctx.put("rateLimitExceeded", "true");  我们通过这个的判断来 限制
	zuul   --> senderror filter -->errorController  
	它会去springBoot的error  所以我们需要把Zuul的error 取消  
	自己写一个 然后   
	
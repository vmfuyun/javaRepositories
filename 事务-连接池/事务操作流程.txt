setAutoCommit
void setAutoCommit(boolean autoCommit)
                   throws SQLException将此连接的自动提交模式设置为给定状态。
如果连接处于自动提交模式下，则它的所有 SQL 语句将被执行并作为单个事务提交。否则，它的 SQL 语句将聚集到事务中，直到调用 commit 方法或 rollback 方法为止。默认情况下，新连接处于自动提交模式。 
提交发生在语句完成时。语句完成的时间取决于 SQL 语句的类型：

对于 Select 语句，语句在关联结果集关闭时完成。 

参数：
autoCommit - 为 true 表示启用自动提交模式；为 false 表示禁用自动提交模式 
commit
void commit()

事务 是连接对象才具有的.
当回滚后  该事务也不会再重复执行了.
操作事务 必须是同一个 连接对象的多个操作

//
操作事务的模板:
1. 手动的开启一个事务(使用连接对象,去手动操作某一些功能.)
2. 如果多个操作都成功,执行连接对象的commit方法
3. 如果某一个操作失败,那么一定要执行连接对象的rollback方法.
try{
       conn.setAutoCommit(false);
      // 多个操作
      ....
      ....
      // 如果所有的操作都没问题,提交事务
      conn.commit();
}catch(Exception e){
      //以后如果代码出现问题,应该有对应的解决方案.
      conn.rollback();// 在操作表的时候,如果出现问题,不会滚,那么相当于是一直持有着资源.
}finally {
       //关闭资源	
}




事务相关的细节:
1):默认情况下,事务在执行完DML操作就自动提交.(如果控制事务,就要手动提交)
2):查询操作,其实是不需要事务的.但是,一般的,我们在开发中都把查询放入事务中.
3):开发中,代码完全正确,没有异常,但是就是数据库中数据不变.
   意识:       没有提交事务.
4):在MySQL中,只有    InnoDB    存储引擎支持事务,支持外键,MyISAM不支持事务.
5):以后事务我们不应该在DAO层处理,应该在service层控制(提出).
6):事务在讲解框架和项目的时候都会再讲.
7):事务的 commit 和rollback  必须要执行一个  不然  别的就拿不到 锁  数据的话 按着 commit来判断   rollback是返回到原先的
